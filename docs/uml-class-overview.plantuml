@startuml uml-class-converter

package "API" {
  class ConverterController {
    + listUnits(): string[]
    + listQuantityTypes(): string[]
    + listUnitsForType(type: string): string[]
    + listAliasForUnit(unit: string): string[]
    + convertUnit(unitA: string, unitB: string, value: number): ConversionResult
    + createSubQuantityClass(parent: string, className: string): void
  }
}

package "Converter" {
  class Converter {
    + convertValue(unitA: string, unitB: string, value: number): ConversionResult
  }

  class ConversionResult {
    + fromUnit: IUnit
    + toUnit: IUnit
    + fromValue: number
    + toValue: number
  }
}

package "Domain" {
  interface IUnit {
    + id: string
    + name: string
    + aliases: string[]
    + types: QuantityType[]
    + symbol: string
    + baseUnit: string
    + convertToBase(value: number): number
    + convertFromBase(value: number): number
  }
  class UnitFactory {
    + {static} loadUnit(name: string): IUnit
  }
}

package "Database" {
  class UnitRepository {
    + getUnitFromNameOrId(value: string): IUnit
    + listAllUnits(): sting[]
    + listQuantityTypes(): string[]
    + listUnitsForType(type: string): string[]
    + listAliasForUnit(unit: string): string[]
    + createSubQuantityClass(className: string, unitIds: string[]): void
  }
}

ConverterController --> Converter
ConverterController --> ConversionResult
ConverterController --> UnitRepository
Converter -LEFT-> ConversionResult
Converter --> IUnit
Converter --> UnitFactory

@enduml